stop("필수 컬럼이 누락되었습니다: ",
paste(setdiff(required_cols, names(data)), collapse = ", "))
}
results <- list()
# 각 분석 실행
results$stage <- analyze_stage_survival(data)
results$lifestyle <- analyze_lifestyle_survival(data)
results$treatment <- analyze_treatment_survival(data)
cat("\n=== EDA 완료 ===\n")
return(results)
}
# 분석 실행
analysis_results <- main_analysis(data)
# 02_01_exploratory_analysis_refactored.R
# 대장암 환자의 생존 예측을 위한 탐색적 데이터 분석 (리팩토링 버전)
# 필요한 패키지 로드
library(survival)
library(survminer)
library(dplyr)
# 데이터 로드
data <- read.csv("pre_process/암임상_라이브러리_합성데이터_train.csv")
# === 공통 함수들 ===
# 생존 통계량 계산 함수
calculate_survival_stats <- function(data, group_var, group_name = "그룹") {
stats <- data %>%
group_by(across(all_of(group_var))) %>%
summarize(
평균 = mean(`암진단후생존일수.Survival.period.`, na.rm = TRUE),
중앙값 = median(`암진단후생존일수.Survival.period.`, na.rm = TRUE),
표준편차 = sd(`암진단후생존일수.Survival.period.`, na.rm = TRUE),
.groups = 'drop'
)
cat("\n=== ", group_name, " 통계량 ===\n")
print(stats)
return(stats)
}
# 생존 분석 수행 함수
perform_survival_analysis <- function(data, group_var, title_suffix) {
# 유효한 데이터만 필터링
valid_data <- data %>%
filter(!is.na(.data[[group_var]]))
if(nrow(valid_data) == 0) {
cat("\n경고: 유효한 데이터가 없습니다.\n")
return(NULL)
}
# 생존자/사망자 그룹별 통계
survival_group <- valid_data %>% filter(`사망여부.Death.` == 0)
death_group <- valid_data %>% filter(`사망여부.Death.` == 1)
if(nrow(survival_group) > 0) {
calculate_survival_stats(survival_group, group_var, "생존자 그룹")
}
if(nrow(death_group) > 0) {
calculate_survival_stats(death_group, group_var, "사망자 그룹")
}
# 생존 분석 실행
tryCatch({
# 생존 곡선 적합
surv_fit <- survfit(
Surv(`암진단후생존일수.Survival.period.`, `사망여부.Death.` == 1) ~
as.factor(valid_data[[group_var]]),
data = valid_data
)
# Log-rank test
surv_diff <- survdiff(
Surv(`암진단후생존일수.Survival.period.`, `사망여부.Death.` == 1) ~
as.factor(valid_data[[group_var]]),
data = valid_data
)
cat("\n=== Log-rank test 결과 ===\n")
print(surv_diff)
# 생존 곡선 플롯
plot <- ggsurvplot(
surv_fit,
data = valid_data,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
title = paste(group_var, title_suffix),
xlab = "생존 시간 (일)",
ylab = "생존 확률"
)
# 결과를 더 명확하게 출력
cat("\n=== 분석 결과 요약 ===\n")
cat("- Log-rank test p-value:", round(surv_diff$p.value, 4), "\n")
cat("- 생존 곡선 플롯이 생성되었습니다. 그래프를 확인하세요.\n")
# 생존 곡선 플롯 출력
print(plot)
return(list(fit = surv_fit, diff = surv_diff, plot = plot))
}, error = function(e) {
cat("\n생존 분석 오류 발생:\n")
print(e)
return(NULL)
})
}
# 분석 결과를 시각화하는 함수
plot_analysis_results <- function(results, title) {
if(is.null(results)) return()
cat("\n=== ", title, " 결과 시각화 ===\n")
# 각 분석 결과의 플롯을 출력
for(name in names(results)) {
if(!is.null(results[[name]]$plot)) {
print(results[[name]]$plot)
}
}
}
# 변수 그룹 분석 함수
analyze_variable_group <- function(data, var_pattern, title_suffix) {
variables <- data %>%
select(starts_with(var_pattern)) %>%
names()
if(length(variables) == 0) {
cat("\n", var_pattern, " 패턴의 변수가 없습니다.\n")
return(NULL)
}
cat("\n=== ", var_pattern, " 변수들 ===\n")
print(variables)
results <- list()
for(var in variables) {
if(any(data[[var]] == 1, na.rm = TRUE)) {
cat("\n=== ", var, " 분석 ===\n")
results[[var]] <- perform_survival_analysis(data, var, title_suffix)
}
}
# 결과 시각화
plot_analysis_results(results, paste(var_pattern, "분석 결과"))
return(results)
}
# === 메인 분석 함수들 ===
# 1. 병기 분석
analyze_stage_survival <- function(data) {
cat("\n=== 병기와 생존일수의 상관관계 분석 ===\n")
# T 병기별 분석
t_stages <- c("Tis", "T1", "T2", "T3", "T4")
t_results <- list()
for(stage in t_stages) {
t_results[[stage]] <- analyze_variable_group(data, paste0("병기STAGE.", stage), paste0(stage, "과 생존의 관련성"))
}
# N 병기별 분석
n_stages <- c("N1", "N2", "N3")
n_results <- list()
for(stage in n_stages) {
n_results[[stage]] <- analyze_variable_group(data, paste0("병기STAGE.", stage), paste0(stage, "과 생존의 관련성"))
}
# M 병기별 분석
m_stages <- c("M1")  # M1만 존재
m_results <- list()
for(stage in m_stages) {
m_results[[stage]] <- analyze_variable_group(data, paste0("병기STAGE.", stage), paste0(stage, "과 생존의 관련성"))
}
return(list(T = t_results, N = n_results, M = m_results))
}
# 2. 생활습관 분석
analyze_lifestyle_survival <- function(data) {
cat("\n=== 흡연·음주와 생존일수의 관계 분석 ===\n")
results <- list()
# 흡연 분석
if("흡연여부.Smoke." %in% names(data)) {
# 흡연 그룹 생성
smoke_data <- data %>%
mutate(
흡연그룹 = case_when(
`흡연여부.Smoke.` == 0 ~ "비흡연",
`흡연여부.Smoke.` == 1 ~ "현재흡연",
`흡연여부.Smoke.` == 2 ~ "과거흡연",
TRUE ~ "기타"
)
)
cat("\n=== 흡연과 생존일수의 관계 분석 ===\n")
results$smoking <- perform_survival_analysis(smoke_data, "흡연그룹", "과 생존의 관련성")
}
# 음주 분석
if("음주종류.Type.of.Drink." %in% names(data)) {
# 음주 그룹 생성
drinking_data <- data %>%
mutate(
음주종류 = case_when(
`음주종류.Type.of.Drink.` == 1 ~ "맥주",
`음주종류.Type.of.Drink.` == 2 ~ "소주",
`음주종류.Type.of.Drink.` == 3 ~ "양주",
TRUE ~ "기타"
)
)
cat("\n=== 음주와 생존일수의 관계 분석 ===\n")
results$drinking <- perform_survival_analysis(drinking_data, "음주종류", "과 생존의 관련성")
}
return(results)
}
# 3. 치료법 분석
analyze_treatment_survival <- function(data) {
cat("\n=== 항암제·방사선 치료와 생존일수의 상관관계 분석 ===\n")
results <- list()
# 항암제 치료 분석
results$chemotherapy <- analyze_variable_group(data, "항암제", "과 생존의 관련성")
# 방사선 치료 분석
results$radiotherapy <- analyze_variable_group(data, "방사선", "과 생존의 관련성")
return(results)
}
# === 전체 분석 실행 ===
main_analysis <- function(data) {
# 데이터 유효성 검사
required_cols <- c("암진단후생존일수.Survival.period.", "사망여부.Death.")
if(!all(required_cols %in% names(data))) {
stop("필수 컬럼이 누락되었습니다: ",
paste(setdiff(required_cols, names(data)), collapse = ", "))
}
results <- list()
# 각 분석 실행
results$stage <- analyze_stage_survival(data)
results$lifestyle <- analyze_lifestyle_survival(data)
results$treatment <- analyze_treatment_survival(data)
cat("\n=== EDA 완료 ===\n")
return(results)
}
# 분석 실행
analysis_results <- main_analysis(data)
# 필요한 패키지 로드
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
# === 데이터 로드 (간소화) ===
load_data <- function(file_path = "pre_process/암임상_라이브러리_합성데이터_train.csv") {
data <- read.csv(file_path)
cat("데이터 로드 완료:", nrow(data), "건\n")
return(data)
}
# === 안전한 생존 분석 함수 ===
safe_survival_analysis <- function(data, group_var, group_name) {
cat("\n", rep("=", 60), "\n")
cat("분석:", group_name, "\n")
cat(rep("=", 60), "\n")
# 데이터 유효성 검사
if(!group_var %in% names(data)) {
cat("오류: 변수", group_var, "가 없습니다.\n")
return(NULL)
}
# 유효한 데이터 필터링
valid_data <- data %>%
filter(
!is.na(.data[[group_var]]),
!is.na(`암진단후생존일수.Survival.period.`),
!is.na(`사망여부.Death.`),
`암진단후생존일수.Survival.period.` > 0
)
if(nrow(valid_data) == 0) {
cat("유효한 데이터가 없습니다.\n")
return(NULL)
}
cat("유효 데이터:", nrow(valid_data), "건\n")
# 그룹별 분포
cat("\n=== 그룹별 분포 ===\n")
group_table <- table(valid_data[[group_var]], useNA = "ifany")
print(group_table)
# 기본 통계량
cat("\n=== 그룹별 생존 통계 ===\n")
stats <- valid_data %>%
group_by(across(all_of(group_var))) %>%
summarize(
환자수 = n(),
평균생존일수 = round(mean(`암진단후생존일수.Survival.period.`), 1),
중앙값생존일수 = round(median(`암진단후생존일수.Survival.period.`), 1),
사망자수 = sum(`사망여부.Death.`),
사망률 = round(mean(`사망여부.Death.`) * 100, 1),
.groups = 'drop'
)
print(stats)
# 생존 분석 실행
tryCatch({
# 생존 객체 생성
surv_obj <- Surv(
time = valid_data$`암진단후생존일수.Survival.period.`,
event = valid_data$`사망여부.Death.`
)
# 생존 곡선 적합
formula_str <- paste("surv_obj ~", group_var)
surv_fit <- survfit(as.formula(formula_str), data = valid_data)
# Log-rank test
surv_diff <- survdiff(as.formula(formula_str), data = valid_data)
# p-value 계산
p_value <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)
cat("\n=== Log-rank Test 결과 ===\n")
cat("p-value:", round(p_value, 4), "\n")
cat("통계적 유의성:", ifelse(p_value < 0.05, "유의함", "유의하지 않음"), "\n")
# 생존 곡선 시각화
plot <- ggsurvplot(
surv_fit,
data = valid_data,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
title = paste(group_name, "생존 분석"),
xlab = "생존 시간 (일)",
ylab = "생존 확률",
legend.title = group_name,
palette = "jco"
)
print(plot)
cat("\n", group_name, "분석 완료! (p =", round(p_value, 4), ")\n")
cat(rep("=", 60), "\n\n")
return(list(
stats = stats,
fit = surv_fit,
test = surv_diff,
p_value = p_value,
plot = plot
))
}, error = function(e) {
cat("분석 오류:", e$message, "\n")
return(NULL)
})
}
# 1. T 병기 분석
analyze_t_stage <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("1. T 병기 분석\n")
cat(rep("#", 80), "\n")
# T 병기 통합[1]
t_data <- data %>%
mutate(
T_Stage = case_when(
`병기STAGE.Tis.` == 1 ~ "Tis",
`병기STAGE.T1.` == 1 | `병기STAGE.T1a.` == 1 | `병기STAGE.T1b.` == 1 | `병기STAGE.T1c.` == 1 ~ "T1",
`병기STAGE.T2.` == 1 | `병기STAGE.T2a.` == 1 | `병기STAGE.T2b.` == 1 | `병기STAGE.T2C.` == 1 ~ "T2",
`병기STAGE.T3.` == 1 | `병기STAGE.T3a.` == 1 | `병기STAGE.T3b.` == 1 ~ "T3",
`병기STAGE.T4.` == 1 | `병기STAGE.T4a.` == 1 | `병기STAGE.T4b.` == 1 ~ "T4",
TRUE ~ "Unknown"
)
) %>%
filter(T_Stage != "Unknown")
result <- safe_survival_analysis(t_data, "T_Stage", "T 병기")
readline("계속하려면 Enter...")
return(result)
}
# 2. N 병기 분석
analyze_n_stage <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("2. N 병기 분석\n")
cat(rep("#", 80), "\n")
# N 병기 통합[1]
n_data <- data %>%
mutate(
N_Stage = case_when(
`병기STAGE.N1.` == 1 | `병기STAGE.N1a.` == 1 | `병기STAGE.N1b.` == 1 | `병기STAGE.N1c.` == 1 ~ "N1",
`병기STAGE.N2.` == 1 | `병기STAGE.N2a.` == 1 | `병기STAGE.N2b.` == 1 | `병기STAGE.N2c.` == 1 ~ "N2",
`병기STAGE.N3.` == 1 | `병기STAGE.N3a.` == 1 | `병기STAGE.N3b.` == 1 ~ "N3",
TRUE ~ "N0"
)
)
result <- safe_survival_analysis(n_data, "N_Stage", "N 병기")
readline("계속하려면 Enter...")
return(result)
}
# 3. M 병기 분석
analyze_m_stage <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("3. M 병기 분석\n")
cat(rep("#", 80), "\n")
# M 병기 통합[1]
m_data <- data %>%
mutate(
M_Stage = case_when(
`병기STAGE.M1.` == 1 | `병기STAGE.M1a.` == 1 | `병기STAGE.M1b.` == 1 | `병기STAGE.M1c.` == 1 ~ "M1",
TRUE ~ "M0"
)
)
result <- safe_survival_analysis(m_data, "M_Stage", "M 병기")
readline("계속하려면 Enter...")
return(result)
}
# 4. 흡연 분석
analyze_smoking <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("4. 흡연 분석\n")
cat(rep("#", 80), "\n")
# 흡연 그룹 생성[1]
smoke_data <- data %>%
mutate(
흡연상태 = case_when(
`흡연여부.Smoke.` == 0 ~ "비흡연",
`흡연여부.Smoke.` == 1 ~ "현재흡연",
`흡연여부.Smoke.` == 2 ~ "과거흡연",
TRUE ~ "미상"
)
) %>%
filter(흡연상태 != "미상")
result <- safe_survival_analysis(smoke_data, "흡연상태", "흡연 상태")
readline("계속하려면 Enter...")
return(result)
}
# 5. 음주 분석
analyze_drinking <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("5. 음주 분석\n")
cat(rep("#", 80), "\n")
# 음주 그룹 생성[1]
drink_data <- data %>%
mutate(
음주종류 = case_when(
`음주종류.Type.of.Drink.` == 1 ~ "맥주",
`음주종류.Type.of.Drink.` == 2 ~ "소주",
`음주종류.Type.of.Drink.` == 3 ~ "양주",
`음주종류.Type.of.Drink.` == 99 ~ "기타",
TRUE ~ "미상"
)
) %>%
filter(음주종류 != "미상")
result <- safe_survival_analysis(drink_data, "음주종류", "음주 종류")
readline("계속하려면 Enter...")
return(result)
}
# 6. 수술 치료 분석
analyze_surgery <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("6. 수술 치료 분석\n")
cat(rep("#", 80), "\n")
# 수술 여부 그룹[1]
surgery_data <- data %>%
mutate(
수술여부 = case_when(
`대장암.수술.여부.Operation.` == 0 ~ "수술안함",
`대장암.수술.여부.Operation.` == 1 ~ "수술함",
TRUE ~ "미상"
)
) %>%
filter(수술여부 != "미상")
result <- safe_survival_analysis(surgery_data, "수술여부", "수술 여부")
readline("계속하려면 Enter...")
return(result)
}
# 7. 항암제 치료 분석
analyze_chemotherapy <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("7. 항암제 치료 분석\n")
cat(rep("#", 80), "\n")
# 항암제 치료 그룹[1]
chemo_data <- data %>%
mutate(
항암제치료 = case_when(
`항암제.치료.여부.Chemotherapy.` == 0 ~ "치료안함",
`항암제.치료.여부.Chemotherapy.` == 1 ~ "치료함",
TRUE ~ "미상"
)
) %>%
filter(항암제치료 != "미상")
result <- safe_survival_analysis(chemo_data, "항암제치료", "항암제 치료")
readline("계속하려면 Enter...")
return(result)
}
# 8. 방사선 치료 분석
analyze_radiotherapy <- function(data) {
cat("\n", rep("#", 80), "\n")
cat("8. 방사선 치료 분석\n")
cat(rep("#", 80), "\n")
# 방사선 치료 그룹[1]
radio_data <- data %>%
mutate(
방사선치료 = case_when(
`방사선치료.여부.Radiation.Therapy.` == 0 ~ "치료안함",
`방사선치료.여부.Radiation.Therapy.` == 1 ~ "치료함",
TRUE ~ "미상"
)
) %>%
filter(방사선치료 != "미상")
result <- safe_survival_analysis(radio_data, "방사선치료", "방사선 치료")
readline("계속하려면 Enter...")
return(result)
}
# === 메인 실행 함수 ===
main_analysis <- function() {
# 간소화된 데이터 로드
data <- load_data()
cat("\n분석 메뉴:\n")
cat("1. T 병기\n2. N 병기\n3. M 병기\n4. 흡연\n5. 음주\n")
cat("6. 수술\n7. 항암제\n8. 방사선\n9. 전체\n")
choice <- readline("선택 (1-9): ")
results <- list()
switch(choice,
"1" = { results$t_stage <- analyze_t_stage(data) },
"2" = { results$n_stage <- analyze_n_stage(data) },
"3" = { results$m_stage <- analyze_m_stage(data) },
"4" = { results$smoking <- analyze_smoking(data) },
"5" = { results$drinking <- analyze_drinking(data) },
"6" = { results$surgery <- analyze_surgery(data) },
"7" = { results$chemotherapy <- analyze_chemotherapy(data) },
"8" = { results$radiotherapy <- analyze_radiotherapy(data) },
"9" = {
results$t_stage <- analyze_t_stage(data)
results$n_stage <- analyze_n_stage(data)
results$m_stage <- analyze_m_stage(data)
results$smoking <- analyze_smoking(data)
results$drinking <- analyze_drinking(data)
results$surgery <- analyze_surgery(data)
results$chemotherapy <- analyze_chemotherapy(data)
results$radiotherapy <- analyze_radiotherapy(data)
},
{ results$t_stage <- analyze_t_stage(data) }
)
cat("\n분석 완료!\n")
return(results)
}
# 실행
analysis_results <- main_analysis()
# 실행
analysis_results <- main_analysis()
# 실행
analysis_results <- main_analysis()
analysis_results <- main_analysis()
analysis_results <- main_analysis()
analysis_results <- main_analysis()
analysis_results <- main_analysis()
analysis_results <- main_analysis()
analysis_results <- main_analysis()
